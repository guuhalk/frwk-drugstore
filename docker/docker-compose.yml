version: '3.8'

services:
    mssql: 
        image: mcr.microsoft.com/mssql/server:2019-latest
        environment:
            - SA_PASSWORD=Suporte59@.!
            - ACCEPT_EULA=Y
        ports:
            - "1433:1433"
        volumes:
            - .mssql/:/var/opt/mssql/data   
        container_name: 
            mssql
        expose:
          - 1433

    rabbitmq:
        image: rabbitmq:3.8-management-alpine
        container_name: rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=guest
            - RABBITMQ_DEFAULT_PASS=guest
        ports:
            - '5672:5672'
            - '15672:15672'
        expose:
          - 15672

    mongodb:        
        image : mongo
        container_name: mongodb
        environment:
            - PUID=1000
            - PGID=1000
        volumes:
            - .mongodb:/data/db
        ports:
            - 27017:27017
        restart: unless-stopped
        mem_limit: 
            512m
        expose:
          - 27017
        
    
    apigateway:
        image: fernando2022/apigateway.api        
        environment:
            - SecretKey=1130f66f-591f-4f1c-a748-f1f9a1c7c43a
            - Database=DBFidelidade
            - DbUser=SA
            - Password=Suporte59@.!
            - Datasource=host.docker.internal, 1433
            - MongoDbDatabase=promotionsdb
            - MongoDbDatasource=mongodb://host.docker.internal:27017
        ports:
            - 7000:80
        networks: 
            - net
        depends_on:
            - rabbitmq
            - kafka
        build:
            context: .
            dockerfile: Web.BootCampFidelidade.HttpAggregator\Dockerfile

    wallet.api:
        image: fernando2022/wallet.api  
        environment:
          - ASPNETCORE_ENVIRONMENT=Development
          - DOCKER_ENVIRONMENT=true
          - ASPNETCORE_URLS=http://+:8001
          - Database=DBFidelidade
          - DbUser=SA
          - Password=Suporte59@.!
          - Datasource=host.docker.internal, 1433
        ports:
            - 8001:8001
        mem_limit: 
            512m
        depends_on:
            - mssql        
        build:
            context: .
            dockerfile: FrwkBootCampFidelidade.Wallet.API\Dockerfile

    bonification.api:
        image: fernando2022/bonification.api  
        environment:
          - ASPNETCORE_ENVIRONMENT=Development
          - DOCKER_ENVIRONMENT=true
          - ASPNETCORE_URLS=http://+:8002
          - Database=DBFidelidade
          - DbUser=SA
          - Password=Suporte59@.!
          - Datasource=host.docker.internal, 1433
        ports:
            - 8002:8002
        mem_limit: 
            512m
        depends_on:
            - mssql    
        build:
            context: .
            dockerfile: FrwkBootCampFidelidade.Bonification.API\Dockerfile    
            
    ransom.api:
        image: fernando2022/ransom.api  
        environment:
          - ASPNETCORE_ENVIRONMENT=Development
          - DOCKER_ENVIRONMENT=true
          - ASPNETCORE_URLS=http://+:8003
          - Database=DBFidelidade
          - DbUser=SA
          - Password=Suporte59@.!
          - Datasource=host.docker.internal, 1433
        ports:
            - 8003:8003
        mem_limit: 
            512m
        depends_on:
            - mssql   
        build:
            context: .
            dockerfile: FrwkBootCampFidelidade.Ransom.API\Dockerfile   
            
    extract.api:
        image: fernando2022/extract.api  
        environment:
          - ASPNETCORE_ENVIRONMENT=Development
          - DOCKER_ENVIRONMENT=true
          - ASPNETCORE_URLS=http://+:8004
          - Database=DBFidelidade
          - DbUser=SA
          - Password=Suporte59@.!
          - Datasource=host.docker.internal, 1433
        ports:
            - 8004:8004
        mem_limit: 
            512m
        depends_on:
            - mssql
        build:
            context: .
            dockerfile: FrwkBootCampFidelidade.Extract.API\Dockerfile

    promotion.api:
        image: fernando2022/promotion.api  
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - DOCKER_ENVIRONMENT=true
            - ASPNETCORE_URLS=http://+:8005
            - MongoDbDatabase=promotionsdb
            - MongoDbDatasource=mongodb://host.docker.internal:27017
        ports:
            - 8005:8005
        mem_limit: 
            512m
        depends_on:
            - mongodb
        build:
            context: .
            dockerfile: FrwkBootCampFidelidade.Promotion.API\Dockerfile

    order.api:
        image: fernando2022/order.api  
        environment:
          - ASPNETCORE_ENVIRONMENT=Development
          - DOCKER_ENVIRONMENT=true
          - ASPNETCORE_URLS=http://+:8004
          - Database=DBFidelidade
          - DbUser=SA
          - Password=Suporte59@.!
          - Datasource=host.docker.internal, 1433
        ports:
            - 8006:8006
        mem_limit: 
            512m
        depends_on:
            - mssql
        build:
            context: .
            dockerfile: FrwkBootCampFidelidade.Order.API\Dockerfile
    
    zookeeper:
      image: confluentinc/cp-zookeeper:latest
      networks: 
        - net
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

    kafka:
      image: confluentinc/cp-kafka:latest
      container_name: kafka
      networks: 
        - net
      depends_on:
        - zookeeper
      ports:
        - 9092:9092
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    kafdrop:
      image: obsidiandynamics/kafdrop:latest
      networks: 
        - net
      depends_on:
        - kafka
      ports:
        - 19000:9000
      environment:
        KAFKA_BROKERCONNECT: kafka:29092
    
    mongo_inventories:
      image : mongo
      container_name: mongo_inventories
      environment:
        - PUID=1000
        - PGID=1000
      volumes:
        - ./mongodb_inventories/database:/data/db
      ports:
        - "27017:27017"
      restart: unless-stopped
      networks:
        - net
    
    mysql_drugstores:
      image: mysql:8.0
      container_name: mysql_drugstores
      command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      environment:
        - MYSQL_ROOT_PASSWORD=root
        - MYSQL_DATABASE=drugstoredb
        - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      ports:
        - "3306"
      restart: unless-stopped
      volumes:
        - ./mysqldb_drugstores/database:/var/lib/mysql
      networks:
        - net
    
    mysql_orders:
      image: mysql:8.0
      container_name: mysql_orders
      command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      environment:
        - MYSQL_ROOT_PASSWORD=root
        - MYSQL_DATABASE=ordersb
        - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      ports:
        - "3306"
      restart: unless-stopped
      volumes:
        - ./mysqldb_orders/database:/var/lib/mysql
      networks:
        - net

    postgres_users:
      image: postgres:14.0
      container_name: postgres_users
      healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
        timeout: 45s
        interval: 10s
        retries: 10
      environment:
        - POSTGRES_USER=root
        - POSTGRES_PASSWORD=admin
        - APP_DB_USER=postgres
        - APP_DB_PASS=admin
        - APP_DB_NAME=userdb
      ports:
        - "5432"
      restart: unless-stopped
      volumes:
        - ./postgresdb_users/database:/var/lib/postgresql/data
        - ./postgresdb_users/scripts:/docker-entrypoint-initdb.d/
      networks:
        - net
    
    postgres_financials:
      image: postgres:14.0
      container_name: postgres_financials
      healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
        timeout: 45s
        interval: 10s
        retries: 10
      environment:
        - POSTGRES_USER=root
        - POSTGRES_PASSWORD=admin
        - APP_DB_USER=postgres
        - APP_DB_PASS=admin
        - APP_DB_NAME=financialdb
      ports:
        - "5432"
      restart: unless-stopped
      volumes:
        - ./postgresdb_financials/database:/var/lib/postgresql/data
        - ./postgresdb_financials/scripts:/docker-entrypoint-initdb.d/
      networks:
        - net

    auth-server:
      depends_on:
        - "ms-users"
      image: danieldhsd/auth-server
      container_name: auth-server
      restart: on-failure
      ports:
        - "8081:8081"
      networks:
        - net

    api-gateway:
      depends_on:
        - rabbitmq
      links:
        - rabbitmq
      image: danieldhsd/api-gateway
      container_name: api-gateway
      restart: on-failure
      ports:
        - "8082:8082"
      networks:
        - net

    ms-drugstores:
      depends_on:
        - "mysql_drugstores"
        - "api-gateway"
      image: danieldhsd/ms-drugstores
      container_name: ms-drugstores
      restart: on-failure
      ports:
        - "8083:8083"
      networks:
        - net

    ms-financial:
      depends_on:
        - "postgres_financials"
        - "api-gateway"
      image: danieldhsd/ms-financial
      container_name: ms-financial
      restart: on-failure
      ports:
        - "8084:8084"
      networks:
        - net
      
    ms-inventory:
      depends_on:
        - "mongo_inventories"
        - "api-gateway"
      image: danieldhsd/ms-inventory
      container_name: ms-inventory
      restart: on-failure
      ports:
        - "8085:8085"
      networks:
        - net
      
    ms-orders:
      depends_on:
        - "mysql_orders"
        - "api-gateway"
        - "kafka"
      image: danieldhsd/ms-orders
      container_name: ms-orders
      restart: on-failure
      ports:
        - "8086:8086"
      networks:
        - net

    ms-users:
      depends_on:
        - "postgres_users"
        - "api-gateway"
      image: danieldhsd/ms-users
      container_name: ms-users
      restart: on-failure
      ports:
        - "8087:8087"
      volumes:
        - ./ms_users/user-photos:/frwldrugstore/user-photos
      networks:
        - net

networks: 
  net:
    driver: bridge